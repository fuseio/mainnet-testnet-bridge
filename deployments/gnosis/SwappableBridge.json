{
  "address": "0xF965a116eDa8e96A0DD0c06F423d01Ee5cc4Bfb6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nativeOft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "bridge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeOft",
      "outputs": [
        {
          "internalType": "contract INativeOFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "adapterParams",
          "type": "bytes"
        }
      ],
      "name": "swapAndBridge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd14321321b3c5c6474fabe1c7e0925bb0c00ec5d0de899dc3f1b14a05347abc2",
  "receipt": {
    "to": null,
    "from": "0x41D6a0eff67A3C8c4d37D8b4f484d4136c3954cc",
    "contractAddress": "0xF965a116eDa8e96A0DD0c06F423d01Ee5cc4Bfb6",
    "transactionIndex": 7,
    "gasUsed": "642384",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfc2144881e1f44d2780051993a34395473ae147dcf534eb3fc33ff7745035cc2",
    "transactionHash": "0xd14321321b3c5c6474fabe1c7e0925bb0c00ec5d0de899dc3f1b14a05347abc2",
    "logs": [],
    "blockNumber": 28567628,
    "cumulativeGasUsed": "11907991",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0F679d4Cbcb5b81e7d18234770936F06024681EA",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
  ],
  "numDeployments": 2,
  "solcInputHash": "872881eb88c56075d29efb33c04e4f5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeOft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeOft\",\"outputs\":[{\"internalType\":\"contract INativeOFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"name\":\"swapAndBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwappableBridge.sol\":\"SwappableBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0xc19c158682e42cad701a6c1f70011b039a2f928b3b491377af981bd5ffebbab8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/INativeOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFTCore.sol\\\";\\n\\ninterface INativeOFT is IOFTCore {\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0x472862b6c2060c916dd53a46fb08d16fa97b068d6ca751a6e05c3eaee38b5881\",\"license\":\"MIT\"},\"contracts/SwappableBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFTCore.sol\\\";\\nimport \\\"./INativeOFT.sol\\\";\\n\\ncontract SwappableBridge {\\n    INativeOFT public immutable nativeOft;\\n    IUniswapV2Router02 public immutable uniswapRouter;\\n\\n    constructor(address _nativeOft, address _uniswapRouter) {\\n        require(_nativeOft != address(0), \\\"SwappableBridge: invalid Native OFT address\\\");\\n        require(_uniswapRouter != address(0), \\\"SwappableBridge: invalid Uniswap Router address\\\");\\n\\n        nativeOft = INativeOFT(_nativeOft);\\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\\n    }\\n\\n    function swapAndBridge(address _oft, uint amountIn, uint amountOutMin, uint16 dstChainId, address to, address payable refundAddress, address zroPaymentAddress, bytes calldata adapterParams) external payable {\\n        require(_oft != address(0), \\\"SwappableBridge: invalid OFT address\\\");\\n        require(to != address(0), \\\"SwappableBridge: invalid to address\\\");\\n        require(msg.value >= amountIn, \\\"SwappableBridge: not enough value sent\\\");\\n        \\n        IOFTCore oft = IOFTCore(_oft);\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapRouter.WETH();\\n        path[1] = _oft;\\n\\n        uint[] memory amounts = uniswapRouter.swapExactETHForTokens{value: amountIn}(amountOutMin, path, address(this), block.timestamp);\\n        oft.sendFrom{value: msg.value - amountIn}(address(this), dstChainId, abi.encodePacked(to), amounts[1], refundAddress, zroPaymentAddress, adapterParams);\\n    }\\n\\n    function bridge(uint amountIn, uint16 dstChainId, address to, address payable refundAddress, address zroPaymentAddress, bytes calldata adapterParams) external payable {\\n        require(to != address(0), \\\"SwappableBridge: invalid to address\\\");\\n        require(msg.value >= amountIn, \\\"SwappableBridge: not enough value sent\\\");\\n\\n        nativeOft.deposit{value: amountIn}();\\n        nativeOft.sendFrom{value: msg.value - amountIn}(address(this), dstChainId, abi.encodePacked(to), amountIn, refundAddress, zroPaymentAddress, adapterParams);\\n    }\\n}\",\"keccak256\":\"0x64dc46d2e4fa7efe26992a68fddecfa8dd603aad84acf6df55dc3f0b8bfda199\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610c41380380610c4183398101604081905261002f9161013f565b6001600160a01b03821661009e5760405162461bcd60e51b815260206004820152602b60248201527f537761707061626c654272696467653a20696e76616c6964204e61746976652060448201526a4f4654206164647265737360a81b60648201526084015b60405180910390fd5b6001600160a01b03811661010c5760405162461bcd60e51b815260206004820152602f60248201527f537761707061626c654272696467653a20696e76616c696420556e697377617060448201526e20526f75746572206164647265737360881b6064820152608401610095565b6001600160a01b039182166080521660a052610172565b80516001600160a01b038116811461013a57600080fd5b919050565b6000806040838503121561015257600080fd5b61015b83610123565b915061016960208401610123565b90509250929050565b60805160a051610a906101b16000396000818160a601528181610352015261044101526000818160560152818161014101526101b50152610a906000f3fe60806040526004361061003f5760003560e01c80631ab425a014610044578063735de9f714610094578063b7370435146100c8578063bb69467c146100dd575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6100db6100d636600461060c565b6100f0565b005b6100db6100eb3660046106a2565b610283565b6001600160a01b03851661011f5760405162461bcd60e51b815260040161011690610757565b60405180910390fd5b8634101561013f5760405162461bcd60e51b81526004016101169061079a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635190563688346101ee91906107e0565b6040516bffffffffffffffffffffffff1960608a901b16602082015230908a906034016040516020818303038152906040528c8a8a8a8a6040518a63ffffffff1660e01b8152600401610248989796959493929190610830565b6000604051808303818588803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b0389166102e55760405162461bcd60e51b8152602060048201526024808201527f537761707061626c654272696467653a20696e76616c6964204f4654206164646044820152637265737360e01b6064820152608401610116565b6001600160a01b03851661030b5760405162461bcd60e51b815260040161011690610757565b8734101561032b5760405162461bcd60e51b81526004016101169061079a565b6040805160028082526060820183528b9260009291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d291906108f8565b816000815181106103e5576103e561091c565b60200260200101906001600160a01b031690816001600160a01b0316815250508a816001815181106104195761041961091c565b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b81526000917f00000000000000000000000000000000000000000000000000000000000000001690637ff36ab5908d9061047e908e90879030904290600401610932565b60006040518083038185885af115801561049c573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526104c5919081019061099c565b90506001600160a01b03831663519056366104e08d346107e0565b6040516bffffffffffffffffffffffff1960608d901b16602082015230908d90603401604051602081830303815290604052866001815181106105255761052561091c565b60200260200101518d8d8d8d6040518a63ffffffff1660e01b8152600401610554989796959493929190610830565b6000604051808303818588803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b5050505050505050505050505050505050565b803561ffff811681146105a657600080fd5b919050565b6001600160a01b03811681146105c057600080fd5b50565b60008083601f8401126105d557600080fd5b50813567ffffffffffffffff8111156105ed57600080fd5b60208301915083602082850101111561060557600080fd5b9250929050565b600080600080600080600060c0888a03121561062757600080fd5b8735965061063760208901610594565b95506040880135610647816105ab565b94506060880135610657816105ab565b93506080880135610667816105ab565b925060a088013567ffffffffffffffff81111561068357600080fd5b61068f8a828b016105c3565b989b979a50959850939692959293505050565b60008060008060008060008060006101008a8c0312156106c157600080fd5b89356106cc816105ab565b985060208a0135975060408a013596506106e860608b01610594565b955060808a01356106f8816105ab565b945060a08a0135610708816105ab565b935060c08a0135610718816105ab565b925060e08a013567ffffffffffffffff81111561073457600080fd5b6107408c828d016105c3565b915080935050809150509295985092959850929598565b60208082526023908201527f537761707061626c654272696467653a20696e76616c696420746f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f537761707061626c654272696467653a206e6f7420656e6f7567682076616c7560408201526519481cd95b9d60d21b606082015260800190565b8181038181111561080157634e487b7160e01b600052601160045260246000fd5b92915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03891681526000602061ffff8a168184015260e0604084015288518060e085015260005b81811015610877578a81018301518582016101000152820161085a565b5061010091506000828286010152601f19601f820116840190508860608501526108ac60808501896001600160a01b03169052565b6001600160a01b03871660a0850152818482030160c08501526108d28282018688610807565b9c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561090a57600080fd5b8151610915816105ab565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b8181101561097c5784516001600160a01b031683529383019391830191600101610957565b50506001600160a01b039690961660408501525050506060015292915050565b600060208083850312156109af57600080fd5b825167ffffffffffffffff808211156109c757600080fd5b818501915085601f8301126109db57600080fd5b8151818111156109ed576109ed6108e2565b8060051b604051601f19603f83011681018181108582111715610a1257610a126108e2565b604052918252848201925083810185019188831115610a3057600080fd5b938501935b82851015610a4e57845184529385019392850192610a35565b9897505050505050505056fea2646970667358221220ade64ae222198e04165470a39ba4ea6c498c66f58321fd8e12d1c474ec6ce36364736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80631ab425a014610044578063735de9f714610094578063b7370435146100c8578063bb69467c146100dd575b600080fd5b34801561005057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a057600080fd5b506100787f000000000000000000000000000000000000000000000000000000000000000081565b6100db6100d636600461060c565b6100f0565b005b6100db6100eb3660046106a2565b610283565b6001600160a01b03851661011f5760405162461bcd60e51b815260040161011690610757565b60405180910390fd5b8634101561013f5760405162461bcd60e51b81526004016101169061079a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635190563688346101ee91906107e0565b6040516bffffffffffffffffffffffff1960608a901b16602082015230908a906034016040516020818303038152906040528c8a8a8a8a6040518a63ffffffff1660e01b8152600401610248989796959493929190610830565b6000604051808303818588803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b0389166102e55760405162461bcd60e51b8152602060048201526024808201527f537761707061626c654272696467653a20696e76616c6964204f4654206164646044820152637265737360e01b6064820152608401610116565b6001600160a01b03851661030b5760405162461bcd60e51b815260040161011690610757565b8734101561032b5760405162461bcd60e51b81526004016101169061079a565b6040805160028082526060820183528b9260009291906020830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d291906108f8565b816000815181106103e5576103e561091c565b60200260200101906001600160a01b031690816001600160a01b0316815250508a816001815181106104195761041961091c565b6001600160a01b039283166020918202929092010152604051637ff36ab560e01b81526000917f00000000000000000000000000000000000000000000000000000000000000001690637ff36ab5908d9061047e908e90879030904290600401610932565b60006040518083038185885af115801561049c573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526104c5919081019061099c565b90506001600160a01b03831663519056366104e08d346107e0565b6040516bffffffffffffffffffffffff1960608d901b16602082015230908d90603401604051602081830303815290604052866001815181106105255761052561091c565b60200260200101518d8d8d8d6040518a63ffffffff1660e01b8152600401610554989796959493929190610830565b6000604051808303818588803b15801561056d57600080fd5b505af1158015610581573d6000803e3d6000fd5b5050505050505050505050505050505050565b803561ffff811681146105a657600080fd5b919050565b6001600160a01b03811681146105c057600080fd5b50565b60008083601f8401126105d557600080fd5b50813567ffffffffffffffff8111156105ed57600080fd5b60208301915083602082850101111561060557600080fd5b9250929050565b600080600080600080600060c0888a03121561062757600080fd5b8735965061063760208901610594565b95506040880135610647816105ab565b94506060880135610657816105ab565b93506080880135610667816105ab565b925060a088013567ffffffffffffffff81111561068357600080fd5b61068f8a828b016105c3565b989b979a50959850939692959293505050565b60008060008060008060008060006101008a8c0312156106c157600080fd5b89356106cc816105ab565b985060208a0135975060408a013596506106e860608b01610594565b955060808a01356106f8816105ab565b945060a08a0135610708816105ab565b935060c08a0135610718816105ab565b925060e08a013567ffffffffffffffff81111561073457600080fd5b6107408c828d016105c3565b915080935050809150509295985092959850929598565b60208082526023908201527f537761707061626c654272696467653a20696e76616c696420746f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f537761707061626c654272696467653a206e6f7420656e6f7567682076616c7560408201526519481cd95b9d60d21b606082015260800190565b8181038181111561080157634e487b7160e01b600052601160045260246000fd5b92915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03891681526000602061ffff8a168184015260e0604084015288518060e085015260005b81811015610877578a81018301518582016101000152820161085a565b5061010091506000828286010152601f19601f820116840190508860608501526108ac60808501896001600160a01b03169052565b6001600160a01b03871660a0850152818482030160c08501526108d28282018688610807565b9c9b505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561090a57600080fd5b8151610915816105ab565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060808201868352602060808185015281875180845260a086019150828901935060005b8181101561097c5784516001600160a01b031683529383019391830191600101610957565b50506001600160a01b039690961660408501525050506060015292915050565b600060208083850312156109af57600080fd5b825167ffffffffffffffff808211156109c757600080fd5b818501915085601f8301126109db57600080fd5b8151818111156109ed576109ed6108e2565b8060051b604051601f19603f83011681018181108582111715610a1257610a126108e2565b604052918252848201925083810185019188831115610a3057600080fd5b938501935b82851015610a4e57845184529385019392850192610a35565b9897505050505050505056fea2646970667358221220ade64ae222198e04165470a39ba4ea6c498c66f58321fd8e12d1c474ec6ce36364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}